import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, k as validate_each_argument, v as validate_slots, e as element, t as text, l as space, c as claim_element, a as children, b as claim_text, m as claim_space, f as detach_dev, g as add_location, p as set_style, o as attr_dev, h as insert_dev, j as append_dev, r as set_data_dev, u as empty, n as noop, q as destroy_each } from './client.39d4f272.js';

const randomEmoji = () => {
    let emojiList = 'üë®‚Äçüíª ü•∞ üê∂ ‚úÖ üëè ü¶Å üì™ üè≠ üêØ ü§ì üëê üëè ü´Ä üë®‚Äçüî¨'.split(' ');
    let index = Math.floor(Math.random()*emojiList.length);
    return emojiList[index];
};

/* src/routes/projects/index.svelte generated by Svelte v3.32.0 */
const file = "src/routes/projects/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (26:0) {#each projects as project}
function create_each_block(ctx) {
	let h2;
	let t0_value = randomEmoji() + "";
	let t0;
	let t1;
	let t2_value = /*project*/ ctx[1].name + "";
	let t2;
	let t3;
	let a;
	let small0;
	let t4;
	let t5_value = /*project*/ ctx[1].id + "";
	let t5;
	let a_href_value;
	let t6;
	let p0;
	let t7_value = /*project*/ ctx[1].description + "";
	let t7;
	let t8;
	let small1;
	let p1;
	let t9;
	let t10_value = /*project*/ ctx[1].author + "";
	let t10;
	let t11;
	let br;

	const block = {
		c: function create() {
			h2 = element("h2");
			t0 = text(t0_value);
			t1 = space();
			t2 = text(t2_value);
			t3 = space();
			a = element("a");
			small0 = element("small");
			t4 = text("Project#");
			t5 = text(t5_value);
			t6 = space();
			p0 = element("p");
			t7 = text(t7_value);
			t8 = space();
			small1 = element("small");
			p1 = element("p");
			t9 = text("Author: ");
			t10 = text(t10_value);
			t11 = space();
			br = element("br");
			this.h();
		},
		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", {});
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, t0_value);
			t1 = claim_space(h2_nodes);
			t2 = claim_text(h2_nodes, t2_value);
			h2_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			a = claim_element(nodes, "A", { href: true });
			var a_nodes = children(a);
			small0 = claim_element(a_nodes, "SMALL", { style: true });
			var small0_nodes = children(small0);
			t4 = claim_text(small0_nodes, "Project#");
			t5 = claim_text(small0_nodes, t5_value);
			small0_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			t6 = claim_space(nodes);
			p0 = claim_element(nodes, "P", {});
			var p0_nodes = children(p0);
			t7 = claim_text(p0_nodes, t7_value);
			p0_nodes.forEach(detach_dev);
			t8 = claim_space(nodes);
			small1 = claim_element(nodes, "SMALL", {});
			var small1_nodes = children(small1);
			p1 = claim_element(small1_nodes, "P", {});
			var p1_nodes = children(p1);
			t9 = claim_text(p1_nodes, "Author: ");
			t10 = claim_text(p1_nodes, t10_value);
			p1_nodes.forEach(detach_dev);
			small1_nodes.forEach(detach_dev);
			t11 = claim_space(nodes);
			br = claim_element(nodes, "BR", {});
			this.h();
		},
		h: function hydrate() {
			add_location(h2, file, 26, 1, 878);
			set_style(small0, "color", "gray");
			add_location(small0, file, 28, 2, 954);
			attr_dev(a, "href", a_href_value = "projects/" + /*project*/ ctx[1].id);
			add_location(a, file, 27, 1, 919);
			add_location(p0, file, 30, 1, 1016);
			add_location(p1, file, 32, 2, 1056);
			add_location(small1, file, 31, 1, 1046);
			add_location(br, file, 34, 1, 1099);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			append_dev(h2, t0);
			append_dev(h2, t1);
			append_dev(h2, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, a, anchor);
			append_dev(a, small0);
			append_dev(small0, t4);
			append_dev(small0, t5);
			insert_dev(target, t6, anchor);
			insert_dev(target, p0, anchor);
			append_dev(p0, t7);
			insert_dev(target, t8, anchor);
			insert_dev(target, small1, anchor);
			append_dev(small1, p1);
			append_dev(p1, t9);
			append_dev(p1, t10);
			insert_dev(target, t11, anchor);
			insert_dev(target, br, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*projects*/ 1 && t2_value !== (t2_value = /*project*/ ctx[1].name + "")) set_data_dev(t2, t2_value);
			if (dirty & /*projects*/ 1 && t5_value !== (t5_value = /*project*/ ctx[1].id + "")) set_data_dev(t5, t5_value);

			if (dirty & /*projects*/ 1 && a_href_value !== (a_href_value = "projects/" + /*project*/ ctx[1].id)) {
				attr_dev(a, "href", a_href_value);
			}

			if (dirty & /*projects*/ 1 && t7_value !== (t7_value = /*project*/ ctx[1].description + "")) set_data_dev(t7, t7_value);
			if (dirty & /*projects*/ 1 && t10_value !== (t10_value = /*project*/ ctx[1].author + "")) set_data_dev(t10, t10_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(a);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t8);
			if (detaching) detach_dev(small1);
			if (detaching) detach_dev(t11);
			if (detaching) detach_dev(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(26:0) {#each projects as project}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let h1;
	let t0;
	let t1;
	let a;
	let t2;
	let t3;
	let br0;
	let t4;
	let hr;
	let t5;
	let br1;
	let t6;
	let each_1_anchor;
	let each_value = /*projects*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");
			h1 = element("h1");
			t0 = text("Existing Projects");
			t1 = space();
			a = element("a");
			t2 = text("+ Project");
			t3 = space();
			br0 = element("br");
			t4 = space();
			hr = element("hr");
			t5 = space();
			br1 = element("br");
			t6 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true });
			var div_nodes = children(div);
			h1 = claim_element(div_nodes, "H1", { style: true });
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Existing Projects");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			a = claim_element(div_nodes, "A", { href: true, style: true });
			var a_nodes = children(a);
			t2 = claim_text(a_nodes, "+ Project");
			a_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			br0 = claim_element(nodes, "BR", {});
			t4 = claim_space(nodes);
			hr = claim_element(nodes, "HR", { style: true });
			t5 = claim_space(nodes);
			br1 = claim_element(nodes, "BR", {});
			t6 = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			set_style(h1, "margin", "0");
			add_location(h1, file, 19, 1, 522);
			attr_dev(a, "href", "projects/new");
			set_style(a, "display", "flex");
			set_style(a, "align-items", "center");
			set_style(a, "justify-content", "center");
			set_style(a, "background", "#2ecc71");
			set_style(a, "border-radius", "5pt");
			set_style(a, "color", "white");
			set_style(a, "padding", "6pt 12pt");
			set_style(a, "text-decoration", "none");
			add_location(a, file, 20, 1, 568);
			set_style(div, "display", "flex");
			set_style(div, "with", "100%");
			set_style(div, "justify-content", "space-between");
			set_style(div, "align-items", "center");
			add_location(div, file, 18, 0, 432);
			add_location(br0, file, 22, 0, 768);
			set_style(hr, "border", "none");
			set_style(hr, "height", "2pt");
			set_style(hr, "width", "100%");
			set_style(hr, "background", "#bdc3c7");
			add_location(hr, file, 23, 0, 773);
			add_location(br1, file, 24, 0, 843);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h1);
			append_dev(h1, t0);
			append_dev(div, t1);
			append_dev(div, a);
			append_dev(a, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, br0, anchor);
			insert_dev(target, t4, anchor);
			insert_dev(target, hr, anchor);
			insert_dev(target, t5, anchor);
			insert_dev(target, br1, anchor);
			insert_dev(target, t6, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*projects, randomEmoji*/ 1) {
				each_value = /*projects*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(br0);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(hr);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(br1);
			if (detaching) detach_dev(t6);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload(page, session) {
	const fetchProjects = async () => {
		let response = await this.fetch("http://localhost:5000/projects");
		let payload = await response.json();
		return payload.projects;
	};

	let projects = await fetchProjects();
	return { projects };
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Projects", slots, []);
	let { projects } = $$props;
	const writable_props = ["projects"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Projects> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("projects" in $$props) $$invalidate(0, projects = $$props.projects);
	};

	$$self.$capture_state = () => ({ preload, randomEmoji, projects });

	$$self.$inject_state = $$props => {
		if ("projects" in $$props) $$invalidate(0, projects = $$props.projects);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [projects];
}

class Projects extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { projects: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Projects",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*projects*/ ctx[0] === undefined && !("projects" in props)) {
			console.warn("<Projects> was created without expected prop 'projects'");
		}
	}

	get projects() {
		throw new Error("<Projects>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set projects(value) {
		throw new Error("<Projects>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Projects;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYTBmMmU1NTAuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9oZWxwZXJzL2Vhc3RlcmVnZ3MuanMiLCIuLi8uLi8uLi9zcmMvcm91dGVzL3Byb2plY3RzL2luZGV4LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgcmFuZG9tRW1vamkgPSAoKSA9PiB7XG4gICAgbGV0IGVtb2ppTGlzdCA9ICfwn5Go4oCN8J+SuyDwn6WwIPCfkLYg4pyFIPCfkY8g8J+mgSDwn5OqIPCfj60g8J+QryDwn6STIPCfkZAg8J+RjyDwn6uAIPCfkajigI3wn5SsJy5zcGxpdCgnICcpO1xuICAgIGxldCBpbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSplbW9qaUxpc3QubGVuZ3RoKTtcbiAgICByZXR1cm4gZW1vamlMaXN0W2luZGV4XTtcbn0iLCI8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cblx0ZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZWxvYWQocGFnZSwgc2Vzc2lvbikge1xuXHRcdGNvbnN0IGZldGNoUHJvamVjdHMgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHRsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmZldGNoKFwiaHR0cDovL2xvY2FsaG9zdDo1MDAwL3Byb2plY3RzXCIpO1xuXHRcdFx0bGV0IHBheWxvYWQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cdFx0XHRyZXR1cm4gcGF5bG9hZC5wcm9qZWN0cztcblx0XHR9O1xuXG5cdFx0bGV0IHByb2plY3RzID0gYXdhaXQgZmV0Y2hQcm9qZWN0cygpO1xuXHRcdHJldHVybiB7IHByb2plY3RzIH07XG5cdH1cbjwvc2NyaXB0PlxuXG48c2NyaXB0PlxuXHRpbXBvcnQgeyByYW5kb21FbW9qaSB9IGZyb20gXCIuLi8uLi9oZWxwZXJzL2Vhc3RlcmVnZ3NcIjtcblx0ZXhwb3J0IGxldCBwcm9qZWN0cztcbjwvc2NyaXB0PlxuXG48ZGl2IHN0eWxlPSdkaXNwbGF5OmZsZXg7IHdpdGg6MTAwJTsganVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47IGFsaWduLWl0ZW1zOmNlbnRlcic+XG5cdDxoMSBzdHlsZT0nbWFyZ2luOjA7Jz5FeGlzdGluZyBQcm9qZWN0czwvaDE+XG5cdDxhIGhyZWY9J3Byb2plY3RzL25ldycgc3R5bGU9J2Rpc3BsYXk6ZmxleDsgYWxpZ24taXRlbXM6Y2VudGVyOyBqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyOyBiYWNrZ3JvdW5kOiMyZWNjNzE7IGJvcmRlci1yYWRpdXM6NXB0OyBjb2xvcjp3aGl0ZTtwYWRkaW5nOjZwdCAxMnB0OyB0ZXh0LWRlY29yYXRpb246bm9uZSc+KyBQcm9qZWN0PC9hPlxuPC9kaXY+XG48YnI+XG48aHIgc3R5bGU9J2JvcmRlcjpub25lOyBoZWlnaHQ6MnB0OyB3aWR0aDoxMDAlOyBiYWNrZ3JvdW5kOiNiZGMzYzc7Jz5cbjxicj5cdFxueyNlYWNoIHByb2plY3RzIGFzIHByb2plY3R9XG5cdDxoMj57cmFuZG9tRW1vamkoKX0ge3Byb2plY3QubmFtZX08L2gyPlxuXHQ8YSBocmVmPVwicHJvamVjdHMve3Byb2plY3QuaWR9XCI+XG5cdFx0PHNtYWxsIHN0eWxlPVwiY29sb3I6Z3JheVwiPlByb2plY3Qje3Byb2plY3QuaWR9PC9zbWFsbD5cblx0PC9hPlxuXHQ8cD57cHJvamVjdC5kZXNjcmlwdGlvbn08L3A+XG5cdDxzbWFsbD5cblx0XHQ8cD5BdXRob3I6IHtwcm9qZWN0LmF1dGhvcn08L3A+XG5cdDwvc21hbGw+XG5cdDxiciAvPlxuey9lYWNofVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQU8sTUFBTSxXQUFXLEdBQUcsTUFBTTtBQUNqQyxJQUFJLElBQUksU0FBUyxHQUFHLGdEQUFnRCxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoRixJQUFJLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzRCxJQUFJLE9BQU8sU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzVCOzs7Ozs7Ozs7Ozs7OztnQkNzQk0sV0FBVzs7OzRCQUFLLEdBQU8sSUFBQyxJQUFJOzs7Ozs7NEJBRUcsR0FBTyxJQUFDLEVBQUU7Ozs7OzRCQUUxQyxHQUFPLElBQUMsV0FBVzs7Ozs7OzZCQUVWLEdBQU8sSUFBQyxNQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0VBTFIsR0FBTyxJQUFDLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3NFQURSLEdBQU8sSUFBQyxJQUFJO3NFQUVHLEdBQU8sSUFBQyxFQUFFOzs0RkFEM0IsR0FBTyxJQUFDLEVBQUU7Ozs7c0VBR3pCLEdBQU8sSUFBQyxXQUFXO3dFQUVWLEdBQU8sSUFBQyxNQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrQkFQckIsR0FBUTs7OztnQ0FBYixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs4QkFBQyxHQUFROzs7OytCQUFiLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7b0NBQUosTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2VBeEJpQixPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU87T0FDcEMsYUFBYTtNQUNkLFFBQVEsU0FBUyxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQztNQUM1RCxPQUFPLFNBQVMsUUFBUSxDQUFDLElBQUk7U0FDMUIsT0FBTyxDQUFDLFFBQVE7OztLQUdwQixRQUFRLFNBQVMsYUFBYTtVQUN6QixRQUFROzs7Ozs7T0FNUCxRQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
