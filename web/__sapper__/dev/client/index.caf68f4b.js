import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, k as validate_each_argument, v as validate_slots, e as element, t as text, l as space, c as claim_element, a as children, b as claim_text, f as detach_dev, m as claim_space, g as add_location, o as attr_dev, h as insert_dev, j as append_dev, n as noop, p as set_style, q as destroy_each } from './client.39d4f272.js';

/* src/routes/components/index.svelte generated by Svelte v3.32.0 */

const file = "src/routes/components/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (31:4) {#each components as component}
function create_each_block(ctx) {
	let a;
	let p0;
	let t0_value = /*component*/ ctx[1].id + "";
	let t0;
	let t1;
	let p1;
	let t2_value = /*component*/ ctx[1].name + "";
	let t2;
	let t3;
	let p2;
	let t4_value = /*component*/ ctx[1].value + "";
	let t4;
	let t5;
	let t6_value = /*component*/ ctx[1].unit + "";
	let t6;
	let t7;
	let p3;
	let t8_value = /*component*/ ctx[1].package + "";
	let t8;
	let t9;
	let p4;
	let t10_value = /*component*/ ctx[1].count + "";
	let t10;

	const block = {
		c: function create() {
			a = element("a");
			p0 = element("p");
			t0 = text(t0_value);
			t1 = space();
			p1 = element("p");
			t2 = text(t2_value);
			t3 = space();
			p2 = element("p");
			t4 = text(t4_value);
			t5 = space();
			t6 = text(t6_value);
			t7 = space();
			p3 = element("p");
			t8 = text(t8_value);
			t9 = space();
			p4 = element("p");
			t10 = text(t10_value);
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true });
			var a_nodes = children(a);
			p0 = claim_element(a_nodes, "P", {});
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, t0_value);
			p0_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			p1 = claim_element(nodes, "P", {});
			var p1_nodes = children(p1);
			t2 = claim_text(p1_nodes, t2_value);
			p1_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			p2 = claim_element(nodes, "P", {});
			var p2_nodes = children(p2);
			t4 = claim_text(p2_nodes, t4_value);
			t5 = claim_space(p2_nodes);
			t6 = claim_text(p2_nodes, t6_value);
			p2_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			p3 = claim_element(nodes, "P", {});
			var p3_nodes = children(p3);
			t8 = claim_text(p3_nodes, t8_value);
			p3_nodes.forEach(detach_dev);
			t9 = claim_space(nodes);
			p4 = claim_element(nodes, "P", {});
			var p4_nodes = children(p4);
			t10 = claim_text(p4_nodes, t10_value);
			p4_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p0, file, 31, 40, 2253);
			attr_dev(a, "href", "components/" + /*component*/ ctx[1].id);
			add_location(a, file, 31, 4, 2217);
			add_location(p1, file, 32, 4, 2283);
			add_location(p2, file, 33, 4, 2311);
			add_location(p3, file, 34, 4, 2357);
			add_location(p4, file, 35, 4, 2388);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, p0);
			append_dev(p0, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, p1, anchor);
			append_dev(p1, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, p2, anchor);
			append_dev(p2, t4);
			append_dev(p2, t5);
			append_dev(p2, t6);
			insert_dev(target, t7, anchor);
			insert_dev(target, p3, anchor);
			append_dev(p3, t8);
			insert_dev(target, t9, anchor);
			insert_dev(target, p4, anchor);
			append_dev(p4, t10);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(p1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(p2);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(p3);
			if (detaching) detach_dev(t9);
			if (detaching) detach_dev(p4);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(31:4) {#each components as component}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let h1;
	let t0;
	let t1;
	let div;
	let p0;
	let t2;
	let t3;
	let p1;
	let t4;
	let t5;
	let p2;
	let t6;
	let t7;
	let p3;
	let t8;
	let t9;
	let p4;
	let t10;
	let t11;
	let each_value = /*components*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text("Component Selection");
			t1 = space();
			div = element("div");
			p0 = element("p");
			t2 = text("Component ID");
			t3 = space();
			p1 = element("p");
			t4 = text("Name/Description");
			t5 = space();
			p2 = element("p");
			t6 = text("Value");
			t7 = space();
			p3 = element("p");
			t8 = text("Package");
			t9 = space();
			p4 = element("p");
			t10 = text("Inventory");
			t11 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Component Selection");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { style: true });
			var div_nodes = children(div);
			p0 = claim_element(div_nodes, "P", { style: true });
			var p0_nodes = children(p0);
			t2 = claim_text(p0_nodes, "Component ID");
			p0_nodes.forEach(detach_dev);
			t3 = claim_space(div_nodes);
			p1 = claim_element(div_nodes, "P", { style: true });
			var p1_nodes = children(p1);
			t4 = claim_text(p1_nodes, "Name/Description");
			p1_nodes.forEach(detach_dev);
			t5 = claim_space(div_nodes);
			p2 = claim_element(div_nodes, "P", { style: true });
			var p2_nodes = children(p2);
			t6 = claim_text(p2_nodes, "Value");
			p2_nodes.forEach(detach_dev);
			t7 = claim_space(div_nodes);
			p3 = claim_element(div_nodes, "P", { style: true });
			var p3_nodes = children(p3);
			t8 = claim_text(p3_nodes, "Package");
			p3_nodes.forEach(detach_dev);
			t9 = claim_space(div_nodes);
			p4 = claim_element(div_nodes, "P", { style: true });
			var p4_nodes = children(p4);
			t10 = claim_text(p4_nodes, "Inventory");
			p4_nodes.forEach(detach_dev);
			t11 = claim_space(div_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file, 23, 0, 1806);
			set_style(p0, "font-weight", "bold");
			add_location(p0, file, 25, 4, 1947);
			set_style(p1, "font-weight", "bold");
			add_location(p1, file, 26, 4, 1996);
			set_style(p2, "font-weight", "bold");
			add_location(p2, file, 27, 4, 2049);
			set_style(p3, "font-weight", "bold");
			add_location(p3, file, 28, 4, 2091);
			set_style(p4, "font-weight", "bold");
			add_location(p4, file, 29, 4, 2135);
			set_style(div, "display", "grid");
			set_style(div, "grid-template-columns", "2fr 5fr 1fr 1fr 1fr");
			set_style(div, "font-size", "9pt");
			set_style(div, "grid-column-gap", "8pt");
			add_location(div, file, 24, 0, 1835);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, div, anchor);
			append_dev(div, p0);
			append_dev(p0, t2);
			append_dev(div, t3);
			append_dev(div, p1);
			append_dev(p1, t4);
			append_dev(div, t5);
			append_dev(div, p2);
			append_dev(p2, t6);
			append_dev(div, t7);
			append_dev(div, p3);
			append_dev(p3, t8);
			append_dev(div, t9);
			append_dev(div, p4);
			append_dev(p4, t10);
			append_dev(div, t11);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*components*/ 1) {
				each_value = /*components*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Components", slots, []);

	let components = [
		// 10UF_CAP_0805
		{
			id: "1UF_CAP_0805",
			type: "capacitor",
			name: "1uF Cap 0805",
			value: 1,
			unit: "uF",
			package: "0805",
			count: 100
		},
		{
			id: "0.1UF_CAP_0805",
			type: "capacitor",
			name: "0.1uF Cap 0805",
			value: 0.1,
			unit: "uF",
			package: "0805",
			count: 100
		},
		{
			id: "4.7UF_CAP_0805",
			type: "capacitor",
			name: "4.7uF Cap 0805",
			value: 4.7,
			unit: "uF",
			package: "0805",
			count: 100
		},
		{
			id: "16PF_CAP_0805",
			type: "capacitor",
			name: "16pF Cap 0805",
			value: 16,
			unit: "pF",
			package: "0805",
			count: 100
		},
		{
			id: "20UF_CAP_KEMETA",
			type: "capacitor",
			name: "20uF Cap KEMET A",
			value: 20,
			unit: "uF",
			package: "KEMET A",
			count: 100
		},
		{
			id: "10UF_CAP_KEMETA",
			type: "capacitor",
			name: "10uF Cap KEMET A",
			value: 10,
			unit: "uF",
			package: "KEMET A",
			count: 100
		},
		// 1K5R_RES_0805
		{
			id: "1K5R_RES_0805",
			type: "resistor",
			name: "1K5R Resistor 0805",
			value: 1500,
			unit: "R",
			package: "0805",
			count: 100
		},
		{
			id: "330R_RES_0805",
			type: "resistor",
			name: "330R Resistor 0805",
			value: 330,
			unit: "R",
			package: "0805",
			count: 100
		},
		{
			id: "10KR_RES_0805",
			type: "resistor",
			name: "10KR Resistor 0805",
			value: 10000,
			unit: "R",
			package: "0805",
			count: 100
		},
		{
			id: "2K2R_RES_0805",
			type: "resistor",
			name: "2K2R Resistor 0805",
			value: 2200,
			unit: "R",
			package: "0805",
			count: 100
		},
		{
			id: "860R_RES_0805",
			type: "resistor",
			name: "860 Resistor 0805",
			value: 860,
			unit: "R",
			package: "0805",
			count: 100
		},
		// MODEL_TRAN_SOT23
		{
			id: "BTS443P_IC_TO252",
			type: "integrated circuit",
			name: "BTS-443-P Smart Highside PROFET",
			value: "BTS443",
			unit: "model",
			package: "TO-252",
			count: 100
		},
		{
			id: "BC817_TRAN_SOT23",
			type: "integrated circuit",
			name: "BC817K 45 V 500 mA NPN general-purpose transistor",
			value: "BC817KH",
			unit: "model",
			package: "SOT-23",
			count: 100
		}
	];

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Components> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ components });

	$$self.$inject_state = $$props => {
		if ("components" in $$props) $$invalidate(0, components = $$props.components);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [components];
}

class Components extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Components",
			options,
			id: create_fragment.name
		});
	}
}

export default Components;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguY2FmNjhmNGIuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvY29tcG9uZW50cy9pbmRleC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgICBsZXQgY29tcG9uZW50cyA9IFtcbiAgICAgICAgLy8gMTBVRl9DQVBfMDgwNVxuICAgICAgICB7aWQ6XCIxVUZfQ0FQXzA4MDVcIiwgdHlwZTonY2FwYWNpdG9yJywgbmFtZTonMXVGIENhcCAwODA1JywgdmFsdWU6MSwgdW5pdDondUYnLCBwYWNrYWdlOicwODA1JywgY291bnQ6MTAwfSxcbiAgICAgICAge2lkOlwiMC4xVUZfQ0FQXzA4MDVcIiwgdHlwZTonY2FwYWNpdG9yJywgbmFtZTonMC4xdUYgQ2FwIDA4MDUnLCB2YWx1ZTowLjEsIHVuaXQ6J3VGJywgcGFja2FnZTonMDgwNScsIGNvdW50OjEwMH0sXG4gICAgICAgIHtpZDpcIjQuN1VGX0NBUF8wODA1XCIsIHR5cGU6J2NhcGFjaXRvcicsIG5hbWU6JzQuN3VGIENhcCAwODA1JywgdmFsdWU6NC43LCB1bml0Oid1RicsIHBhY2thZ2U6JzA4MDUnLCBjb3VudDoxMDB9LFxuICAgICAgICB7aWQ6XCIxNlBGX0NBUF8wODA1XCIsIHR5cGU6J2NhcGFjaXRvcicsIG5hbWU6JzE2cEYgQ2FwIDA4MDUnLCB2YWx1ZToxNiwgdW5pdDoncEYnLCBwYWNrYWdlOicwODA1JywgY291bnQ6MTAwfSxcbiAgICAgICAge2lkOlwiMjBVRl9DQVBfS0VNRVRBXCIsIHR5cGU6J2NhcGFjaXRvcicsIG5hbWU6JzIwdUYgQ2FwIEtFTUVUIEEnLCB2YWx1ZToyMCwgdW5pdDondUYnLCBwYWNrYWdlOidLRU1FVCBBJywgY291bnQ6MTAwfSxcbiAgICAgICAge2lkOlwiMTBVRl9DQVBfS0VNRVRBXCIsIHR5cGU6J2NhcGFjaXRvcicsIG5hbWU6JzEwdUYgQ2FwIEtFTUVUIEEnLCB2YWx1ZToxMCwgdW5pdDondUYnLCBwYWNrYWdlOidLRU1FVCBBJywgY291bnQ6MTAwfSxcblxuICAgICAgICAvLyAxSzVSX1JFU18wODA1XG4gICAgICAgIHtpZDpcIjFLNVJfUkVTXzA4MDVcIiwgdHlwZToncmVzaXN0b3InLCBuYW1lOicxSzVSIFJlc2lzdG9yIDA4MDUnLCB2YWx1ZToxNTAwLCB1bml0OidSJywgcGFja2FnZTonMDgwNScsIGNvdW50OjEwMH0sXG4gICAgICAgIHtpZDpcIjMzMFJfUkVTXzA4MDVcIiwgdHlwZToncmVzaXN0b3InLCBuYW1lOiczMzBSIFJlc2lzdG9yIDA4MDUnLCB2YWx1ZTozMzAsIHVuaXQ6J1InLCBwYWNrYWdlOicwODA1JywgY291bnQ6MTAwfSxcbiAgICAgICAge2lkOlwiMTBLUl9SRVNfMDgwNVwiLCB0eXBlOidyZXNpc3RvcicsIG5hbWU6JzEwS1IgUmVzaXN0b3IgMDgwNScsIHZhbHVlOjEwMDAwLCB1bml0OidSJywgcGFja2FnZTonMDgwNScsIGNvdW50OjEwMH0sXG4gICAgICAgIHtpZDpcIjJLMlJfUkVTXzA4MDVcIiwgdHlwZToncmVzaXN0b3InLCBuYW1lOicySzJSIFJlc2lzdG9yIDA4MDUnLCB2YWx1ZToyMjAwLCB1bml0OidSJywgcGFja2FnZTonMDgwNScsIGNvdW50OjEwMH0sXG4gICAgICAgIHtpZDpcIjg2MFJfUkVTXzA4MDVcIiwgdHlwZToncmVzaXN0b3InLCBuYW1lOic4NjAgUmVzaXN0b3IgMDgwNScsIHZhbHVlOjg2MCwgdW5pdDonUicsIHBhY2thZ2U6JzA4MDUnLCBjb3VudDoxMDB9LFxuXG4gICAgICAgIC8vIE1PREVMX1RSQU5fU09UMjNcbiAgICAgICAge2lkOlwiQlRTNDQzUF9JQ19UTzI1MlwiLCB0eXBlOidpbnRlZ3JhdGVkIGNpcmN1aXQnLCBuYW1lOidCVFMtNDQzLVAgU21hcnQgSGlnaHNpZGUgUFJPRkVUJywgdmFsdWU6J0JUUzQ0MycsIHVuaXQ6J21vZGVsJywgcGFja2FnZTonVE8tMjUyJywgY291bnQ6MTAwfSxcbiAgICAgICAge2lkOlwiQkM4MTdfVFJBTl9TT1QyM1wiLCB0eXBlOidpbnRlZ3JhdGVkIGNpcmN1aXQnLCBuYW1lOidCQzgxN0sgNDUgViA1MDAgbUEgTlBOIGdlbmVyYWwtcHVycG9zZSB0cmFuc2lzdG9yJywgdmFsdWU6J0JDODE3S0gnLCB1bml0Oidtb2RlbCcsIHBhY2thZ2U6J1NPVC0yMycsIGNvdW50OjEwMH0sXG4gICAgXVxuPC9zY3JpcHQ+XG5cbjxoMT5Db21wb25lbnQgU2VsZWN0aW9uPC9oMT5cbjxkaXYgc3R5bGU9J2Rpc3BsYXk6Z3JpZDsgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOjJmciA1ZnIgMWZyIDFmciAxZnI7IGZvbnQtc2l6ZTo5cHQ7IGdyaWQtY29sdW1uLWdhcDogOHB0Oyc+XG4gICAgPHAgc3R5bGU9J2ZvbnQtd2VpZ2h0OmJvbGQnPkNvbXBvbmVudCBJRDwvcD5cbiAgICA8cCBzdHlsZT0nZm9udC13ZWlnaHQ6Ym9sZCc+TmFtZS9EZXNjcmlwdGlvbjwvcD5cbiAgICA8cCBzdHlsZT0nZm9udC13ZWlnaHQ6Ym9sZCc+VmFsdWU8L3A+XG4gICAgPHAgc3R5bGU9J2ZvbnQtd2VpZ2h0OmJvbGQnPlBhY2thZ2U8L3A+XG4gICAgPHAgc3R5bGU9J2ZvbnQtd2VpZ2h0OmJvbGQnPkludmVudG9yeTwvcD5cbiAgICB7I2VhY2ggY29tcG9uZW50cyBhcyBjb21wb25lbnR9XG4gICAgPGEgaHJlZj0nY29tcG9uZW50cy97Y29tcG9uZW50LmlkfSc+PHA+e2NvbXBvbmVudC5pZH08L3A+PC9hPlxuICAgIDxwPntjb21wb25lbnQubmFtZX08L3A+XG4gICAgPHA+e2NvbXBvbmVudC52YWx1ZX0ge2NvbXBvbmVudC51bml0fTwvcD5cbiAgICA8cD57Y29tcG9uZW50LnBhY2thZ2V9PC9wPlxuICAgIDxwPntjb21wb25lbnQuY291bnR9PC9wPlxuICAgIHsvZWFjaH1cbjwvZGl2PiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OzhCQStCNEMsR0FBUyxJQUFDLEVBQUU7Ozs7OEJBQ2hELEdBQVMsSUFBQyxJQUFJ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
