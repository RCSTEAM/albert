import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, k as validate_each_argument, v as validate_slots, e as element, t as text, l as space, c as claim_element, a as children, b as claim_text, f as detach_dev, m as claim_space, g as add_location, h as insert_dev, j as append_dev, r as set_data_dev, p as set_style, n as noop, q as destroy_each } from './client.39d4f272.js';

/* src/routes/projects/[slug].svelte generated by Svelte v3.32.0 */

const file = "src/routes/projects/[slug].svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

// (76:4) {#each bom as component}
function create_each_block(ctx) {
	let p0;
	let t0_value = /*component*/ ctx[2].id + "";
	let t0;
	let t1;
	let p1;
	let t2_value = /*component*/ ctx[2].name + "";
	let t2;
	let t3;
	let p2;
	let t4_value = /*component*/ ctx[2].value + "";
	let t4;
	let t5;
	let t6_value = /*component*/ ctx[2].unit + "";
	let t6;
	let t7;
	let p3;
	let t8_value = /*component*/ ctx[2].package + "";
	let t8;
	let t9;
	let p4;
	let t10_value = /*component*/ ctx[2].count + "";
	let t10;

	const block = {
		c: function create() {
			p0 = element("p");
			t0 = text(t0_value);
			t1 = space();
			p1 = element("p");
			t2 = text(t2_value);
			t3 = space();
			p2 = element("p");
			t4 = text(t4_value);
			t5 = space();
			t6 = text(t6_value);
			t7 = space();
			p3 = element("p");
			t8 = text(t8_value);
			t9 = space();
			p4 = element("p");
			t10 = text(t10_value);
			this.h();
		},
		l: function claim(nodes) {
			p0 = claim_element(nodes, "P", {});
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, t0_value);
			p0_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			p1 = claim_element(nodes, "P", {});
			var p1_nodes = children(p1);
			t2 = claim_text(p1_nodes, t2_value);
			p1_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			p2 = claim_element(nodes, "P", {});
			var p2_nodes = children(p2);
			t4 = claim_text(p2_nodes, t4_value);
			t5 = claim_space(p2_nodes);
			t6 = claim_text(p2_nodes, t6_value);
			p2_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			p3 = claim_element(nodes, "P", {});
			var p3_nodes = children(p3);
			t8 = claim_text(p3_nodes, t8_value);
			p3_nodes.forEach(detach_dev);
			t9 = claim_space(nodes);
			p4 = claim_element(nodes, "P", {});
			var p4_nodes = children(p4);
			t10 = claim_text(p4_nodes, t10_value);
			p4_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p0, file, 76, 4, 3796);
			add_location(p1, file, 77, 4, 3822);
			add_location(p2, file, 78, 4, 3850);
			add_location(p3, file, 79, 4, 3896);
			add_location(p4, file, 80, 4, 3927);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p0, anchor);
			append_dev(p0, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, p1, anchor);
			append_dev(p1, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, p2, anchor);
			append_dev(p2, t4);
			append_dev(p2, t5);
			append_dev(p2, t6);
			insert_dev(target, t7, anchor);
			insert_dev(target, p3, anchor);
			append_dev(p3, t8);
			insert_dev(target, t9, anchor);
			insert_dev(target, p4, anchor);
			append_dev(p4, t10);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*bom*/ 2 && t0_value !== (t0_value = /*component*/ ctx[2].id + "")) set_data_dev(t0, t0_value);
			if (dirty & /*bom*/ 2 && t2_value !== (t2_value = /*component*/ ctx[2].name + "")) set_data_dev(t2, t2_value);
			if (dirty & /*bom*/ 2 && t4_value !== (t4_value = /*component*/ ctx[2].value + "")) set_data_dev(t4, t4_value);
			if (dirty & /*bom*/ 2 && t6_value !== (t6_value = /*component*/ ctx[2].unit + "")) set_data_dev(t6, t6_value);
			if (dirty & /*bom*/ 2 && t8_value !== (t8_value = /*component*/ ctx[2].package + "")) set_data_dev(t8, t8_value);
			if (dirty & /*bom*/ 2 && t10_value !== (t10_value = /*component*/ ctx[2].count + "")) set_data_dev(t10, t10_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(p1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(p2);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(p3);
			if (detaching) detach_dev(t9);
			if (detaching) detach_dev(p4);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(76:4) {#each bom as component}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let h1;
	let t0_value = /*project*/ ctx[0].name + "";
	let t0;
	let t1;
	let span;
	let t2;
	let t3_value = /*project*/ ctx[0].id + "";
	let t3;
	let t4;
	let p0;
	let t5_value = /*project*/ ctx[0].description + "";
	let t5;
	let t6;
	let h2;
	let t7;
	let t8;
	let div;
	let p1;
	let t9;
	let t10;
	let p2;
	let t11;
	let t12;
	let p3;
	let t13;
	let t14;
	let p4;
	let t15;
	let t16;
	let p5;
	let t17;
	let t18;
	let each_value = /*bom*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text(t0_value);
			t1 = space();
			span = element("span");
			t2 = text("Project#");
			t3 = text(t3_value);
			t4 = space();
			p0 = element("p");
			t5 = text(t5_value);
			t6 = space();
			h2 = element("h2");
			t7 = text("Bill of Materials");
			t8 = space();
			div = element("div");
			p1 = element("p");
			t9 = text("Component ID");
			t10 = space();
			p2 = element("p");
			t11 = text("Name/Description");
			t12 = space();
			p3 = element("p");
			t13 = text("Value");
			t14 = space();
			p4 = element("p");
			t15 = text("Package");
			t16 = space();
			p5 = element("p");
			t17 = text("Required");
			t18 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, t0_value);
			t1 = claim_space(h1_nodes);
			span = claim_element(h1_nodes, "SPAN", { style: true });
			var span_nodes = children(span);
			t2 = claim_text(span_nodes, "Project#");
			t3 = claim_text(span_nodes, t3_value);
			span_nodes.forEach(detach_dev);
			h1_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			p0 = claim_element(nodes, "P", {});
			var p0_nodes = children(p0);
			t5 = claim_text(p0_nodes, t5_value);
			p0_nodes.forEach(detach_dev);
			t6 = claim_space(nodes);
			h2 = claim_element(nodes, "H2", {});
			var h2_nodes = children(h2);
			t7 = claim_text(h2_nodes, "Bill of Materials");
			h2_nodes.forEach(detach_dev);
			t8 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { style: true });
			var div_nodes = children(div);
			p1 = claim_element(div_nodes, "P", { style: true });
			var p1_nodes = children(p1);
			t9 = claim_text(p1_nodes, "Component ID");
			p1_nodes.forEach(detach_dev);
			t10 = claim_space(div_nodes);
			p2 = claim_element(div_nodes, "P", { style: true });
			var p2_nodes = children(p2);
			t11 = claim_text(p2_nodes, "Name/Description");
			p2_nodes.forEach(detach_dev);
			t12 = claim_space(div_nodes);
			p3 = claim_element(div_nodes, "P", { style: true });
			var p3_nodes = children(p3);
			t13 = claim_text(p3_nodes, "Value");
			p3_nodes.forEach(detach_dev);
			t14 = claim_space(div_nodes);
			p4 = claim_element(div_nodes, "P", { style: true });
			var p4_nodes = children(p4);
			t15 = claim_text(p4_nodes, "Package");
			p4_nodes.forEach(detach_dev);
			t16 = claim_space(div_nodes);
			p5 = claim_element(div_nodes, "P", { style: true });
			var p5_nodes = children(p5);
			t17 = claim_text(p5_nodes, "Required");
			p5_nodes.forEach(detach_dev);
			t18 = claim_space(div_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(span, "color", "gray");
			set_style(span, "font-size", "9pt");
			add_location(span, file, 64, 19, 3291);
			add_location(h1, file, 64, 0, 3272);
			add_location(p0, file, 66, 0, 3365);
			add_location(h2, file, 68, 0, 3395);
			set_style(p1, "font-weight", "bold");
			add_location(p1, file, 70, 4, 3534);
			set_style(p2, "font-weight", "bold");
			add_location(p2, file, 71, 4, 3583);
			set_style(p3, "font-weight", "bold");
			add_location(p3, file, 72, 4, 3636);
			set_style(p4, "font-weight", "bold");
			add_location(p4, file, 73, 4, 3678);
			set_style(p5, "font-weight", "bold");
			add_location(p5, file, 74, 4, 3722);
			set_style(div, "display", "grid");
			set_style(div, "grid-template-columns", "2fr 5fr 1fr 1fr 1fr");
			set_style(div, "font-size", "9pt");
			set_style(div, "grid-column-gap", "8pt");
			add_location(div, file, 69, 0, 3422);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			append_dev(h1, t1);
			append_dev(h1, span);
			append_dev(span, t2);
			append_dev(span, t3);
			insert_dev(target, t4, anchor);
			insert_dev(target, p0, anchor);
			append_dev(p0, t5);
			insert_dev(target, t6, anchor);
			insert_dev(target, h2, anchor);
			append_dev(h2, t7);
			insert_dev(target, t8, anchor);
			insert_dev(target, div, anchor);
			append_dev(div, p1);
			append_dev(p1, t9);
			append_dev(div, t10);
			append_dev(div, p2);
			append_dev(p2, t11);
			append_dev(div, t12);
			append_dev(div, p3);
			append_dev(p3, t13);
			append_dev(div, t14);
			append_dev(div, p4);
			append_dev(p4, t15);
			append_dev(div, t16);
			append_dev(div, p5);
			append_dev(p5, t17);
			append_dev(div, t18);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*project*/ 1 && t0_value !== (t0_value = /*project*/ ctx[0].name + "")) set_data_dev(t0, t0_value);
			if (dirty & /*project*/ 1 && t3_value !== (t3_value = /*project*/ ctx[0].id + "")) set_data_dev(t3, t3_value);
			if (dirty & /*project*/ 1 && t5_value !== (t5_value = /*project*/ ctx[0].description + "")) set_data_dev(t5, t5_value);

			if (dirty & /*bom*/ 2) {
				each_value = /*bom*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t8);
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

let projects = [
	{
		id: "1",
		name: "PDM Board",
		description: "low voltage power distribution board for the car"
	},
	{
		id: "2",
		name: "Segment PCB",
		description: "segment PCB for the accumilator."
	},
	{
		id: "3",
		name: "PCB Combination",
		description: "Mervin's PCB!!!"
	}
];

let projectToComponent = [
	{
		project: "1",
		component: "1k5R_res_0805",
		required: 3
	},
	{
		project: "1",
		component: "10UF_CAP_KEMETA",
		required: 10
	},
	{
		project: "1",
		component: "BTS443P_IC_TO252",
		required: 5
	},
	{
		project: "2",
		component: "1uf_cap_0805",
		required: 2
	},
	{
		project: "3",
		component: "bc817_tran_sot23",
		required: 8
	},
	{
		project: "3",
		component: "16PF_CAP_0805",
		required: 2
	},
	{
		project: "3",
		component: "2K2R_RES_0805",
		required: 5
	}
];

let components = [
	// 10UF_CAP_0805
	{
		id: "1UF_CAP_0805",
		type: "capacitor",
		name: "1uF Cap 0805",
		value: 1,
		unit: "uF",
		package: "0805",
		count: 100
	},
	{
		id: "0.1UF_CAP_0805",
		type: "capacitor",
		name: "0.1uF Cap 0805",
		value: 0.1,
		unit: "uF",
		package: "0805",
		count: 100
	},
	{
		id: "4.7UF_CAP_0805",
		type: "capacitor",
		name: "4.7uF Cap 0805",
		value: 4.7,
		unit: "uF",
		package: "0805",
		count: 100
	},
	{
		id: "16PF_CAP_0805",
		type: "capacitor",
		name: "16pF Cap 0805",
		value: 16,
		unit: "pF",
		package: "0805",
		count: 100
	},
	{
		id: "20UF_CAP_KEMETA",
		type: "capacitor",
		name: "20uF Cap KEMET A",
		value: 20,
		unit: "uF",
		package: "KEMET A",
		count: 100
	},
	{
		id: "10UF_CAP_KEMETA",
		type: "capacitor",
		name: "10uF Cap KEMET A",
		value: 10,
		unit: "uF",
		package: "KEMET A",
		count: 100
	},
	// 1K5R_RES_0805
	{
		id: "1K5R_RES_0805",
		type: "resistor",
		name: "1K5R Resistor 0805",
		value: 1500,
		unit: "R",
		package: "0805",
		count: 100
	},
	{
		id: "330R_RES_0805",
		type: "resistor",
		name: "330R Resistor 0805",
		value: 330,
		unit: "R",
		package: "0805",
		count: 100
	},
	{
		id: "10KR_RES_0805",
		type: "resistor",
		name: "10KR Resistor 0805",
		value: 10000,
		unit: "R",
		package: "0805",
		count: 100
	},
	{
		id: "2K2R_RES_0805",
		type: "resistor",
		name: "2K2R Resistor 0805",
		value: 2200,
		unit: "R",
		package: "0805",
		count: 100
	},
	{
		id: "860R_RES_0805",
		type: "resistor",
		name: "860 Resistor 0805",
		value: 860,
		unit: "R",
		package: "0805",
		count: 100
	},
	// MODEL_TRAN_SOT23
	{
		id: "BTS443P_IC_TO252",
		type: "integrated circuit",
		name: "BTS-443-P Smart Highside PROFET",
		value: "BTS443",
		unit: "model",
		package: "TO-252",
		count: 100
	},
	{
		id: "BC817_TRAN_SOT23",
		type: "integrated circuit",
		name: "BC817K 45 V 500 mA NPN general-purpose transistor",
		value: "BC817KH",
		unit: "model",
		package: "SOT-23",
		count: 100
	}
];

async function preload({ params, query }) {
	let project = projects.filter(e => e.id == params.slug);

	let bom = projectToComponent.reduce(
		(acc, curr) => {
			if (curr.project == params.slug) {
				let component = components.filter(e => e.id.toLowerCase() == curr.component.toLowerCase())[0];
				let entry = { ...component, count: curr.required };
				return [...acc, entry];
			} else {
				return acc;
			}
		},
		[]
	);

	return { project: project[0], bom };
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("U5Bslugu5D", slots, []);
	let { project } = $$props, { bom } = $$props;
	const writable_props = ["project", "bom"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<U5Bslugu5D> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("project" in $$props) $$invalidate(0, project = $$props.project);
		if ("bom" in $$props) $$invalidate(1, bom = $$props.bom);
	};

	$$self.$capture_state = () => ({
		projects,
		projectToComponent,
		components,
		preload,
		project,
		bom
	});

	$$self.$inject_state = $$props => {
		if ("project" in $$props) $$invalidate(0, project = $$props.project);
		if ("bom" in $$props) $$invalidate(1, bom = $$props.bom);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [project, bom];
}

class U5Bslugu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { project: 0, bom: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bslugu5D",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*project*/ ctx[0] === undefined && !("project" in props)) {
			console.warn("<U5Bslugu5D> was created without expected prop 'project'");
		}

		if (/*bom*/ ctx[1] === undefined && !("bom" in props)) {
			console.warn("<U5Bslugu5D> was created without expected prop 'bom'");
		}
	}

	get project() {
		throw new Error("<U5Bslugu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set project(value) {
		throw new Error("<U5Bslugu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get bom() {
		throw new Error("<U5Bslugu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set bom(value) {
		throw new Error("<U5Bslugu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Bslugu5D;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
