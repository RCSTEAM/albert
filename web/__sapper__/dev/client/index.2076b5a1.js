import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, w as globals, e as element, t as text, l as space, c as claim_element, a as children, b as claim_text, f as detach_dev, m as claim_space, g as add_location, o as attr_dev, h as insert_dev, j as append_dev, x as set_input_value, y as listen_dev, z as prevent_default, n as noop, A as run_all } from './client.39d4f272.js';

/* src/routes/projects/new/index.svelte generated by Svelte v3.32.0 */

const { console: console_1 } = globals;
const file = "src/routes/projects/new/index.svelte";

function create_fragment(ctx) {
	let h1;
	let t0;
	let t1;
	let form;
	let label0;
	let t2;
	let t3;
	let input0;
	let t4;
	let br0;
	let t5;
	let label1;
	let t6;
	let t7;
	let input1;
	let t8;
	let br1;
	let t9;
	let label2;
	let t10;
	let t11;
	let input2;
	let t12;
	let br2;
	let t13;
	let label3;
	let t14;
	let t15;
	let input3;
	let t16;
	let br3;
	let t17;
	let input4;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text("Upload a new Project");
			t1 = space();
			form = element("form");
			label0 = element("label");
			t2 = text("Project Name");
			t3 = space();
			input0 = element("input");
			t4 = space();
			br0 = element("br");
			t5 = space();
			label1 = element("label");
			t6 = text("Description");
			t7 = space();
			input1 = element("input");
			t8 = space();
			br1 = element("br");
			t9 = space();
			label2 = element("label");
			t10 = text("Project Author");
			t11 = space();
			input2 = element("input");
			t12 = space();
			br2 = element("br");
			t13 = space();
			label3 = element("label");
			t14 = text("Upload BoM CSV");
			t15 = space();
			input3 = element("input");
			t16 = space();
			br3 = element("br");
			t17 = space();
			input4 = element("input");
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Upload a new Project");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			form = claim_element(nodes, "FORM", {});
			var form_nodes = children(form);
			label0 = claim_element(form_nodes, "LABEL", { for: true });
			var label0_nodes = children(label0);
			t2 = claim_text(label0_nodes, "Project Name");
			label0_nodes.forEach(detach_dev);
			t3 = claim_space(form_nodes);
			input0 = claim_element(form_nodes, "INPUT", { name: true, type: true });
			t4 = claim_space(form_nodes);
			br0 = claim_element(form_nodes, "BR", {});
			t5 = claim_space(form_nodes);
			label1 = claim_element(form_nodes, "LABEL", { for: true });
			var label1_nodes = children(label1);
			t6 = claim_text(label1_nodes, "Description");
			label1_nodes.forEach(detach_dev);
			t7 = claim_space(form_nodes);
			input1 = claim_element(form_nodes, "INPUT", { name: true, type: true });
			t8 = claim_space(form_nodes);
			br1 = claim_element(form_nodes, "BR", {});
			t9 = claim_space(form_nodes);
			label2 = claim_element(form_nodes, "LABEL", { for: true });
			var label2_nodes = children(label2);
			t10 = claim_text(label2_nodes, "Project Author");
			label2_nodes.forEach(detach_dev);
			t11 = claim_space(form_nodes);
			input2 = claim_element(form_nodes, "INPUT", { name: true, type: true });
			t12 = claim_space(form_nodes);
			br2 = claim_element(form_nodes, "BR", {});
			t13 = claim_space(form_nodes);
			label3 = claim_element(form_nodes, "LABEL", { for: true });
			var label3_nodes = children(label3);
			t14 = claim_text(label3_nodes, "Upload BoM CSV");
			label3_nodes.forEach(detach_dev);
			t15 = claim_space(form_nodes);
			input3 = claim_element(form_nodes, "INPUT", { name: true, type: true });
			t16 = claim_space(form_nodes);
			br3 = claim_element(form_nodes, "BR", {});
			t17 = claim_space(form_nodes);
			input4 = claim_element(form_nodes, "INPUT", { type: true });
			form_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file, 33, 0, 809);
			attr_dev(label0, "for", "name");
			add_location(label0, file, 36, 4, 889);
			attr_dev(input0, "name", "name");
			attr_dev(input0, "type", "text");
			add_location(input0, file, 37, 4, 932);
			add_location(br0, file, 39, 4, 998);
			attr_dev(label1, "for", "description");
			add_location(label1, file, 41, 4, 1008);
			attr_dev(input1, "name", "description");
			attr_dev(input1, "type", "text");
			add_location(input1, file, 42, 4, 1057);
			add_location(br1, file, 44, 4, 1136);
			attr_dev(label2, "for", "author");
			add_location(label2, file, 46, 4, 1146);
			attr_dev(input2, "name", "author");
			attr_dev(input2, "type", "text");
			add_location(input2, file, 47, 4, 1193);
			add_location(br2, file, 49, 4, 1262);
			attr_dev(label3, "for", "bom");
			add_location(label3, file, 51, 4, 1272);
			attr_dev(input3, "name", "bom");
			attr_dev(input3, "type", "file");
			add_location(input3, file, 52, 4, 1316);
			add_location(br3, file, 54, 4, 1365);
			attr_dev(input4, "type", "submit");
			add_location(input4, file, 56, 4, 1375);
			add_location(form, file, 34, 0, 839);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, form, anchor);
			append_dev(form, label0);
			append_dev(label0, t2);
			append_dev(form, t3);
			append_dev(form, input0);
			set_input_value(input0, /*formdata*/ ctx[0].name);
			append_dev(form, t4);
			append_dev(form, br0);
			append_dev(form, t5);
			append_dev(form, label1);
			append_dev(label1, t6);
			append_dev(form, t7);
			append_dev(form, input1);
			set_input_value(input1, /*formdata*/ ctx[0].description);
			append_dev(form, t8);
			append_dev(form, br1);
			append_dev(form, t9);
			append_dev(form, label2);
			append_dev(label2, t10);
			append_dev(form, t11);
			append_dev(form, input2);
			set_input_value(input2, /*formdata*/ ctx[0].author);
			append_dev(form, t12);
			append_dev(form, br2);
			append_dev(form, t13);
			append_dev(form, label3);
			append_dev(label3, t14);
			append_dev(form, t15);
			append_dev(form, input3);
			append_dev(form, t16);
			append_dev(form, br3);
			append_dev(form, t17);
			append_dev(form, input4);

			if (!mounted) {
				dispose = [
					listen_dev(input0, "input", /*input0_input_handler*/ ctx[3]),
					listen_dev(input1, "input", /*input1_input_handler*/ ctx[4]),
					listen_dev(input2, "input", /*input2_input_handler*/ ctx[5]),
					listen_dev(input3, "change", /*input3_change_handler*/ ctx[6]),
					listen_dev(form, "submit", prevent_default(/*submitForm*/ ctx[2]), false, true, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*formdata*/ 1 && input0.value !== /*formdata*/ ctx[0].name) {
				set_input_value(input0, /*formdata*/ ctx[0].name);
			}

			if (dirty & /*formdata*/ 1 && input1.value !== /*formdata*/ ctx[0].description) {
				set_input_value(input1, /*formdata*/ ctx[0].description);
			}

			if (dirty & /*formdata*/ 1 && input2.value !== /*formdata*/ ctx[0].author) {
				set_input_value(input2, /*formdata*/ ctx[0].author);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(form);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("New", slots, []);
	let formdata = {};
	let files;

	const submitForm = async () => {
		let formData = new FormData();
		formData.append("payload", JSON.stringify(formdata));
		formData.append("bom", files[0]);
		let response = await fetch("/projects/new", { method: "POST", body: formData });
		let bom = await response.json();

		let formResponse = await fetch("http://localhost:5000/projects", {
			method: "POST",
			body: JSON.stringify({ bom, project: { name: "test" } }),
			headers: { "content-type": "application/json" }
		});

		console.log(await formResponse.json());
	};

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<New> was created with unknown prop '${key}'`);
	});

	function input0_input_handler() {
		formdata.name = this.value;
		$$invalidate(0, formdata);
	}

	function input1_input_handler() {
		formdata.description = this.value;
		$$invalidate(0, formdata);
	}

	function input2_input_handler() {
		formdata.author = this.value;
		$$invalidate(0, formdata);
	}

	function input3_change_handler() {
		files = this.files;
		$$invalidate(1, files);
	}

	$$self.$capture_state = () => ({ formdata, files, submitForm });

	$$self.$inject_state = $$props => {
		if ("formdata" in $$props) $$invalidate(0, formdata = $$props.formdata);
		if ("files" in $$props) $$invalidate(1, files = $$props.files);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		formdata,
		files,
		submitForm,
		input0_input_handler,
		input1_input_handler,
		input2_input_handler,
		input3_change_handler
	];
}

class New extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "New",
			options,
			id: create_fragment.name
		});
	}
}

export default New;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguMjA3NmI1YTEuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvcHJvamVjdHMvbmV3L2luZGV4LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICAgIGxldCBmb3JtZGF0YSA9IHt9XG4gICAgbGV0IGZpbGVzO1xuICAgIGNvbnN0IHN1Ym1pdEZvcm0gPSBhc3luYyAoKSA9PiB7XG5cbiAgICAgICAgbGV0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgncGF5bG9hZCcsSlNPTi5zdHJpbmdpZnkoZm9ybWRhdGEpKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdib20nLCBmaWxlc1swXSk7XG5cbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9wcm9qZWN0cy9uZXcnLCB7XG4gICAgICAgICAgICBtZXRob2Q6XCJQT1NUXCIsXG4gICAgICAgICAgICBib2R5OmZvcm1EYXRhXG4gICAgICAgIH0pXG5cbiAgICAgICAgbGV0IGJvbSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICAgICAgICBsZXQgZm9ybVJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHA6Ly9sb2NhbGhvc3Q6NTAwMC9wcm9qZWN0cycsIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgIGJvbTogYm9tLFxuICAgICAgICAgICAgICAgIHByb2plY3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTondGVzdCcsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgJ2NvbnRlbnQtdHlwZSc6J2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgY29uc29sZS5sb2coYXdhaXQgZm9ybVJlc3BvbnNlLmpzb24oKSlcbiAgICB9XG48L3NjcmlwdD5cblxuPGgxPlVwbG9hZCBhIG5ldyBQcm9qZWN0PC9oMT5cbjxmb3JtIG9uOnN1Ym1pdHxwcmV2ZW50RGVmYXVsdD17c3VibWl0Rm9ybX0+XG5cbiAgICA8bGFiZWwgZm9yPSduYW1lJz5Qcm9qZWN0IE5hbWU8L2xhYmVsPlxuICAgIDxpbnB1dCBuYW1lPSduYW1lJyB0eXBlPSd0ZXh0JyBiaW5kOnZhbHVlPXtmb3JtZGF0YS5uYW1lfSAvPlxuXG4gICAgPGJyPlxuXG4gICAgPGxhYmVsIGZvcj0nZGVzY3JpcHRpb24nPkRlc2NyaXB0aW9uPC9sYWJlbD5cbiAgICA8aW5wdXQgbmFtZT0nZGVzY3JpcHRpb24nIHR5cGU9J3RleHQnIGJpbmQ6dmFsdWU9e2Zvcm1kYXRhLmRlc2NyaXB0aW9ufS8+XG5cbiAgICA8YnI+XG5cbiAgICA8bGFiZWwgZm9yPSdhdXRob3InPlByb2plY3QgQXV0aG9yPC9sYWJlbD5cbiAgICA8aW5wdXQgbmFtZT0nYXV0aG9yJyB0eXBlPSd0ZXh0JyBiaW5kOnZhbHVlPXtmb3JtZGF0YS5hdXRob3J9Lz5cblxuICAgIDxicj5cblxuICAgIDxsYWJlbCBmb3I9J2JvbSc+VXBsb2FkIEJvTSBDU1Y8L2xhYmVsPlxuICAgIDxpbnB1dCBuYW1lPSdib20nIHR5cGU9J2ZpbGUnIGJpbmQ6ZmlsZXMgLz5cblxuICAgIDxicj5cblxuICAgIDxpbnB1dCB0eXBlPSdzdWJtaXQnIC8+XG48L2Zvcm0+Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt3Q0FxQytDLEdBQVEsSUFBQyxJQUFJOzs7Ozs7Ozt3Q0FLTixHQUFRLElBQUMsV0FBVzs7Ozs7Ozs7d0NBS3pCLEdBQVEsSUFBQyxNQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OytEQWJoQyxHQUFVOzs7Ozs7OytEQUdLLEdBQVEsSUFBQyxJQUFJO3lDQUFiLEdBQVEsSUFBQyxJQUFJOzs7K0RBS04sR0FBUSxJQUFDLFdBQVc7eUNBQXBCLEdBQVEsSUFBQyxXQUFXOzs7K0RBS3pCLEdBQVEsSUFBQyxNQUFNO3lDQUFmLEdBQVEsSUFBQyxNQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBOUN4RCxRQUFRO0tBQ1IsS0FBSzs7T0FDSCxVQUFVO01BRVIsUUFBUSxPQUFPLFFBQVE7RUFDM0IsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRO0VBQ2pELFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO01BRTFCLFFBQVEsU0FBUyxLQUFLLENBQUMsZUFBZSxJQUN0QyxNQUFNLEVBQUMsTUFBTSxFQUNiLElBQUksRUFBQyxRQUFRO01BR2IsR0FBRyxTQUFTLFFBQVEsQ0FBQyxJQUFJOztNQUV6QixZQUFZLFNBQVMsS0FBSyxDQUFDLGdDQUFnQztHQUMzRCxNQUFNLEVBQUUsTUFBTTtHQUNkLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxHQUNYLEdBQUcsRUFDUixPQUFPLElBQ0gsSUFBSSxFQUFDLE1BQU07R0FHbkIsT0FBTyxJQUNILGNBQWMsRUFBQyxrQkFBa0I7OztFQUl6QyxPQUFPLENBQUMsR0FBRyxPQUFPLFlBQVksQ0FBQyxJQUFJOzs7Ozs7Ozs7O0VBUUksUUFBUSxDQUFDLElBQUk7Ozs7O0VBS04sUUFBUSxDQUFDLFdBQVc7Ozs7O0VBS3pCLFFBQVEsQ0FBQyxNQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
