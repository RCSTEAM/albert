import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, k as validate_each_argument, v as validate_slots, e as element, t as text, c as claim_element, a as children, b as claim_text, f as detach_dev, g as add_location, o as attr_dev, h as insert_dev, j as append_dev, r as set_data_dev, l as space, u as empty, m as claim_space, n as noop, q as destroy_each } from './client.39d4f272.js';

/* src/routes/components/[slug].svelte generated by Svelte v3.32.0 */

const file = "src/routes/components/[slug].svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

// (36:0) {#each projects as project}
function create_each_block(ctx) {
	let a;
	let p;
	let t0;
	let t1_value = /*project*/ ctx[2] + "";
	let t1;
	let a_href_value;

	const block = {
		c: function create() {
			a = element("a");
			p = element("p");
			t0 = text("Project#");
			t1 = text(t1_value);
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true });
			var a_nodes = children(a);
			p = claim_element(a_nodes, "P", {});
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, "Project#");
			t1 = claim_text(p_nodes, t1_value);
			p_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file, 36, 29, 1258);
			attr_dev(a, "href", a_href_value = "projects/" + /*project*/ ctx[2]);
			add_location(a, file, 36, 0, 1229);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, p);
			append_dev(p, t0);
			append_dev(p, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*projects*/ 2 && t1_value !== (t1_value = /*project*/ ctx[2] + "")) set_data_dev(t1, t1_value);

			if (dirty & /*projects*/ 2 && a_href_value !== (a_href_value = "projects/" + /*project*/ ctx[2])) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(36:0) {#each projects as project}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let h1;
	let t0;
	let t1;
	let h2;
	let t2;
	let t3;
	let each_1_anchor;
	let each_value = /*projects*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text(/*component*/ ctx[0]);
			t1 = space();
			h2 = element("h2");
			t2 = text("Related Projects");
			t3 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, /*component*/ ctx[0]);
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			h2 = claim_element(nodes, "H2", {});
			var h2_nodes = children(h2);
			t2 = claim_text(h2_nodes, "Related Projects");
			h2_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file, 33, 0, 1154);
			add_location(h2, file, 34, 0, 1175);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, h2, anchor);
			append_dev(h2, t2);
			insert_dev(target, t3, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*component*/ 1) set_data_dev(t0, /*component*/ ctx[0]);

			if (dirty & /*projects*/ 2) {
				each_value = /*projects*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t3);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

let projectToComponent = [
	{
		project: "1",
		component: "1k5R_res_0805",
		required: 3
	},
	{
		project: "1",
		component: "10UF_CAP_KEMETA",
		required: 10
	},
	{
		project: "2",
		component: "10UF_CAP_KEMETA",
		required: 10
	},
	{
		project: "3",
		component: "10UF_CAP_KEMETA",
		required: 10
	},
	{
		project: "1",
		component: "BTS443P_IC_TO252",
		required: 5
	},
	{
		project: "2",
		component: "1uf_cap_0805",
		required: 2
	},
	{
		project: "3",
		component: "bc817_tran_sot23",
		required: 8
	},
	{
		project: "1",
		component: "16PF_CAP_0805",
		required: 2
	},
	{
		project: "3",
		component: "16PF_CAP_0805",
		required: 2
	},
	{
		project: "3",
		component: "2K2R_RES_0805",
		required: 5
	}
];

async function preload({ params, query }) {
	let projects = projectToComponent.reduce(
		(acc, curr) => {
			if (curr.component.toLowerCase() == params.slug.toLowerCase()) {
				return [...acc, curr.project];
			} else {
				return acc;
			}
		},
		[]
	);

	return {
		projects,
		component: params.slug.toLowerCase()
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("U5Bslugu5D", slots, []);
	let { component } = $$props, { projects } = $$props;
	const writable_props = ["component", "projects"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<U5Bslugu5D> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("component" in $$props) $$invalidate(0, component = $$props.component);
		if ("projects" in $$props) $$invalidate(1, projects = $$props.projects);
	};

	$$self.$capture_state = () => ({
		projectToComponent,
		preload,
		component,
		projects
	});

	$$self.$inject_state = $$props => {
		if ("component" in $$props) $$invalidate(0, component = $$props.component);
		if ("projects" in $$props) $$invalidate(1, projects = $$props.projects);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [component, projects];
}

class U5Bslugu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { component: 0, projects: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bslugu5D",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*component*/ ctx[0] === undefined && !("component" in props)) {
			console.warn("<U5Bslugu5D> was created without expected prop 'component'");
		}

		if (/*projects*/ ctx[1] === undefined && !("projects" in props)) {
			console.warn("<U5Bslugu5D> was created without expected prop 'projects'");
		}
	}

	get component() {
		throw new Error("<U5Bslugu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set component(value) {
		throw new Error("<U5Bslugu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get projects() {
		throw new Error("<U5Bslugu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set projects(value) {
		throw new Error("<U5Bslugu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Bslugu5D;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiW3NsdWddLjIzYzU0ZjRmLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL2NvbXBvbmVudHMvW3NsdWddLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0IGNvbnRleHQ9J21vZHVsZSc+XG5cbiAgICBsZXQgcHJvamVjdFRvQ29tcG9uZW50ID0gW1xuICAgICAgICB7cHJvamVjdDpcIjFcIixjb21wb25lbnQ6XCIxazVSX3Jlc18wODA1XCIsIHJlcXVpcmVkOjN9LFxuICAgICAgICB7cHJvamVjdDpcIjFcIixjb21wb25lbnQ6XCIxMFVGX0NBUF9LRU1FVEFcIiwgcmVxdWlyZWQ6MTB9LFxuICAgICAgICB7cHJvamVjdDpcIjJcIixjb21wb25lbnQ6XCIxMFVGX0NBUF9LRU1FVEFcIiwgcmVxdWlyZWQ6MTB9LFxuICAgICAgICB7cHJvamVjdDpcIjNcIixjb21wb25lbnQ6XCIxMFVGX0NBUF9LRU1FVEFcIiwgcmVxdWlyZWQ6MTB9LFxuICAgICAgICB7cHJvamVjdDpcIjFcIixjb21wb25lbnQ6XCJCVFM0NDNQX0lDX1RPMjUyXCIsIHJlcXVpcmVkOjV9LFxuICAgICAgICB7cHJvamVjdDpcIjJcIixjb21wb25lbnQ6XCIxdWZfY2FwXzA4MDVcIiwgcmVxdWlyZWQ6Mn0sXG4gICAgICAgIHtwcm9qZWN0OlwiM1wiLGNvbXBvbmVudDpcImJjODE3X3RyYW5fc290MjNcIiwgcmVxdWlyZWQ6OH0sXG4gICAgICAgIHtwcm9qZWN0OlwiMVwiLGNvbXBvbmVudDpcIjE2UEZfQ0FQXzA4MDVcIiwgcmVxdWlyZWQ6Mn0sXG4gICAgICAgIHtwcm9qZWN0OlwiM1wiLGNvbXBvbmVudDpcIjE2UEZfQ0FQXzA4MDVcIiwgcmVxdWlyZWQ6Mn0sXG4gICAgICAgIHtwcm9qZWN0OlwiM1wiLGNvbXBvbmVudDpcIjJLMlJfUkVTXzA4MDVcIiwgcmVxdWlyZWQ6NX0sXG4gICAgXVxuXG4gICAgZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZWxvYWQoe3BhcmFtcywgcXVlcnl9KSB7XG5cbiAgICAgICAgbGV0IHByb2plY3RzID0gcHJvamVjdFRvQ29tcG9uZW50LnJlZHVjZSgoYWNjLGN1cnIpID0+IHtcbiAgICAgICAgICAgIGlmIChjdXJyLmNvbXBvbmVudC50b0xvd2VyQ2FzZSgpID09IHBhcmFtcy5zbHVnLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWy4uLmFjYywgY3Vyci5wcm9qZWN0XVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIFtdKVxuXG4gICAgICAgIHJldHVybiB7cHJvamVjdHM6IHByb2plY3RzLCBjb21wb25lbnQ6cGFyYW1zLnNsdWcudG9Mb3dlckNhc2UoKX1cbiAgICB9XG48L3NjcmlwdD5cblxuPHNjcmlwdD5cbiAgICBleHBvcnQgbGV0IGNvbXBvbmVudCwgcHJvamVjdHNcbjwvc2NyaXB0PlxuXG48aDE+e2NvbXBvbmVudH08L2gxPlxuPGgyPlJlbGF0ZWQgUHJvamVjdHM8L2gyPlxueyNlYWNoIHByb2plY3RzIGFzIHByb2plY3R9XG48YSBocmVmPSdwcm9qZWN0cy97cHJvamVjdH0nPjxwPlByb2plY3Qje3Byb2plY3R9PC9wPjwvYT5cbnsvZWFjaH0iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7NEJBb0N5QyxHQUFPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dFQUE3QixHQUFPOzs7Ozs7Ozs7O3NFQUFlLEdBQU87OzRGQUE3QixHQUFPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytCQURuQixHQUFROzs7O2dDQUFiLE1BQUk7Ozs7Ozs7MkJBRkQsR0FBUzs7Ozs7Ozs7Ozs7Ozs7OzsyQ0FBVCxHQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrREFBVCxHQUFTOzs7OEJBRVAsR0FBUTs7OzsrQkFBYixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7O29DQUFKLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBakNFLGtCQUFrQjs7RUFDakIsT0FBTyxFQUFDLEdBQUc7RUFBQyxTQUFTLEVBQUMsZUFBZTtFQUFFLFFBQVEsRUFBQyxDQUFDOzs7RUFDakQsT0FBTyxFQUFDLEdBQUc7RUFBQyxTQUFTLEVBQUMsaUJBQWlCO0VBQUUsUUFBUSxFQUFDLEVBQUU7OztFQUNwRCxPQUFPLEVBQUMsR0FBRztFQUFDLFNBQVMsRUFBQyxpQkFBaUI7RUFBRSxRQUFRLEVBQUMsRUFBRTs7O0VBQ3BELE9BQU8sRUFBQyxHQUFHO0VBQUMsU0FBUyxFQUFDLGlCQUFpQjtFQUFFLFFBQVEsRUFBQyxFQUFFOzs7RUFDcEQsT0FBTyxFQUFDLEdBQUc7RUFBQyxTQUFTLEVBQUMsa0JBQWtCO0VBQUUsUUFBUSxFQUFDLENBQUM7OztFQUNwRCxPQUFPLEVBQUMsR0FBRztFQUFDLFNBQVMsRUFBQyxjQUFjO0VBQUUsUUFBUSxFQUFDLENBQUM7OztFQUNoRCxPQUFPLEVBQUMsR0FBRztFQUFDLFNBQVMsRUFBQyxrQkFBa0I7RUFBRSxRQUFRLEVBQUMsQ0FBQzs7O0VBQ3BELE9BQU8sRUFBQyxHQUFHO0VBQUMsU0FBUyxFQUFDLGVBQWU7RUFBRSxRQUFRLEVBQUMsQ0FBQzs7O0VBQ2pELE9BQU8sRUFBQyxHQUFHO0VBQUMsU0FBUyxFQUFDLGVBQWU7RUFBRSxRQUFRLEVBQUMsQ0FBQzs7O0VBQ2pELE9BQU8sRUFBQyxHQUFHO0VBQUMsU0FBUyxFQUFDLGVBQWU7RUFBRSxRQUFRLEVBQUMsQ0FBQzs7OztlQUdoQyxPQUFPLEdBQUUsTUFBTSxFQUFFLEtBQUs7S0FFcEMsUUFBUSxHQUFHLGtCQUFrQixDQUFDLE1BQU07R0FBRSxHQUFHLEVBQUMsSUFBSTtPQUMxQyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVc7ZUFDNUMsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPOztXQUVyQixHQUFHOzs7Ozs7O0VBSUEsUUFBUTtFQUFFLFNBQVMsRUFBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVc7Ozs7Ozs7T0FLdEQsU0FBUyxnQkFBRSxRQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
